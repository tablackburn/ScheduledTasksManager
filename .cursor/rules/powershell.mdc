---
description: 'PowerShell cmdlet and scripting best practices based on Microsoft guidelines'
globs: '**/*.ps1,**/*.psm1'
alwaysApply: false
---

# PowerShell Cmdlet Development Guidelines

This guide provides PowerShell-specific instructions to help GitHub Copilot generate idiomatic, safe, and maintainable scripts. It aligns with Microsoft's PowerShell cmdlet development guidelines.

## Naming Conventions

- **Verb-Noun Format:**
  - Use approved PowerShell verbs (Get-Verb)
  - Use singular nouns
  - PascalCase for both verb and noun
  - Avoid special characters and spaces
  - Use PascalCase for acronyms (e.g., `Get-HttpResponse`)
    - Avoid using abbreviations unless they are well-known (e.g., `Get-UserProfile` instead of `Get-UP`)
    - Exceptions: When existing cmdlets use abbreviations, maintain consistency (e.g., `Get-ADUser`)

- **Parameter Names:**
  - Use PascalCase
  - Choose clear, descriptive names
  - Use singular form unless always multiple
  - Follow PowerShell standard names

- **Variable Names:**
  - Use PascalCase for public variables
  - Use camelCase for private variables
  - Avoid abbreviations
  - Use meaningful names

- **Alias Avoidance:**
  - Use full cmdlet names
  - Avoid using aliases in scripts (e.g., use `Get-ChildItem` instead of `gci`)
  - Document any custom aliases
  - Use full parameter names

### Example

```powershell
function Get-UserProfile {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]
        $Username,

        [Parameter(Mandatory = $false)]
        [ValidateSet('Basic', 'Detailed')]
        [string]
        $ProfileType = 'Basic'
    )

    begin {
        Write-Verbose "Starting user profile retrieval for '$Username'"
    }

    process {
        # Logic here
    }

    end {
        Write-Verbose "Completed user profile retrieval for '$Username'"
    }
}
```

## Parameter Design

- **Standard Parameters:**
  - Use common parameter names (`Path`, `Name`, `Force`)
  - Follow built-in cmdlet conventions
  - Use aliases for specialized terms
  - Document parameter purpose

- **Parameter Names:**
  - Use singular form unless always multiple
  - Choose clear, descriptive names
  - Follow PowerShell conventions
  - Use PascalCase formatting

- **Type Selection:**
  - Use common .NET types
  - Implement proper validation
  - Consider ValidateSet for limited options
  - Enable tab completion where possible

- **Switch Parameters:**
  - Use the `switch` data type for boolean flags
  - Avoid `$true/$false` parameters
  - Default to `$false` when omitted
  - Use clear action names

### Example

```powershell
function Set-ResourceConfiguration {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]
        $Name,

        [Parameter(Mandatory = $false)]
        [ValidateSet('Dev', 'Test', 'Prod')]
        [string]
        $Environment = 'Dev',

        [Parameter(Mandatory = $false)]
        [switch]
        $Force,

        [Parameter(Mandatory = $false)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        $Tags
    )

    begin {
        Write-Verbose "Starting resource configuration for '$Name' in '$Environment' environment"
    }

    process {
        # Logic here
    }

    end {
        Write-Verbose "Completed resource configuration for '$Name' in '$Environment' environment"
    }
}
```

## Pipeline and Output

- **Pipeline Input:**
  - Use `ValueFromPipeline` for direct object input
  - Use `ValueFromPipelineByPropertyName` for property mapping
  - Implement `begin`/`process`/`end` blocks for pipeline handling
  - Document pipeline input requirements

- **Output Objects:**
  - Return rich objects, not formatted text
  - Use the `PSCustomObject` data type for structured data
  - Avoid `Write-Host` for data output
  - Enable downstream cmdlet processing
  - Use `Write-Output` for returning objects
  - Set `OutputType` attribute for cmdlets
  - Avoid the `return` keyword for outputting objects

- **Pipeline Streaming:**
  - Output one object at a time
  - Use process block for streaming
  - Avoid collecting large arrays
  - Enable immediate processing

- **PassThru Pattern:**
  - Default to no output for action cmdlets
  - Implement `-PassThru` switch for object return
  - Return modified/created object with `-PassThru`
  - Use verbose/warning for status updates

### Example

```powershell
function Update-ResourceStatus {
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(
          Mandatory = $true,
          ValueFromPipeline = $true,
          ValueFromPipelineByPropertyName = $true
        )]
        [string]
        $Name,

        [Parameter(Mandatory = $true)]
        [ValidateSet('Active', 'Inactive', 'Maintenance')]
        [string]
        $Status,

        [Parameter(Mandatory = $false)]
        [switch]
        $PassThru
    )

    begin {
        Write-Verbose "Starting resource status update process for '$Name'"
        $timestamp = Get-Date
    }

    process {
        # Process each resource individually
        Write-Verbose "Processing resource: $Name"

        $resource = [PSCustomObject]@{
            Name        = $Name
            Status      = $Status
            LastUpdated = $timestamp
            UpdatedBy   = $env:USERNAME
        }

        # Only output if PassThru is specified
        if ($PassThru) {
            Write-Output $resource
        }
    }

    end {
        Write-Verbose "Resource status update process completed for '$Name'"
    }
}
```

## Error Handling and Safety

- **ShouldProcess Implementation:**
  - Use `[CmdletBinding(SupportsShouldProcess = $true)]`
  - Set appropriate `ConfirmImpact` level
  - Call `$PSCmdlet.ShouldProcess()` for system changes
  - Use `ShouldContinue()` for additional confirmations

- **Message Streams:**
  - `Write-Verbose` for operational details with `-Verbose`
  - `Write-Warning` for warning conditions
  - `Write-Error` for non-terminating errors
  - `throw` for terminating errors
  - Avoid `Write-Host` except for user interface text

- **Error Handling Pattern:**
  - Use `try`/`catch` blocks for error management
  - Set appropriate `ErrorAction` preferences
  - Avoid using `$ErrorActionPreference`
  - Return meaningful error messages
  - Use `ErrorVariable` when needed
  - Include proper terminating vs non-terminating error handling

- **Non-Interactive Design:**
  - Accept input via parameters
  - Avoid `Read-Host` in scripts
  - Support automation scenarios
  - Document all required inputs

### Example

```powershell
function Remove-UserAccount {
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = 'High')]
    param(
        [Parameter(
          Mandatory = $true,
          ValueFromPipeline = $true
        )]
        [ValidateNotNullOrEmpty()]
        [string]
        $Username,

        [Parameter(Mandatory = $false)]
        [switch]
        $Force
    )

    begin {
        Write-Verbose "Starting user account removal process for '$Username'"
    }

    process {
        try {
            # Validation
            if (-not (Test-UserExists -Username $Username)) {
                Write-Error "User account '$Username' not found"
                return
            }

            # Confirmation
            $shouldProcessMessage = "Remove user account '$Username'"
            if ($Force -or $PSCmdlet.ShouldProcess($Username, $shouldProcessMessage)) {
                Write-Verbose "Removing user account: $Username"

                # Main operation
                Remove-ADUser -Identity $Username -ErrorAction 'Stop'
                Write-Warning "User account '$Username' has been removed"
            }
        }
        catch [Microsoft.ActiveDirectory.Management.ADException] {
            Write-Error "Active Directory error: $_"
            throw
        }
        catch {
            Write-Error "Unexpected error removing user account: $_"
            throw
        }
    }

    end {
        Write-Verbose "User account removal process completed for '$Username'"
    }
}
```

## Documentation and Style

- **Comment-Based Help:**
  - Include comment-based help for any public-facing function or cmdlet
  - Inside the function, add a `<# ... #>` help comment with at least:
    - `.SYNOPSIS` Brief description
    - `.DESCRIPTION` Detailed explanation
    - `.EXAMPLE` sections with practical usage
    - `.PARAMETER` descriptions
    - `.INPUTS` Type of pipeline input
    - `.OUTPUTS` Type of output returned
    - `.NOTES` Additional information
  - `.LINK` should only contain URLs

- **Consistent Formatting:**
  - Follow consistent PowerShell style
  - Use proper indentation (4 spaces recommended)
  - Opening braces on same line as statement
  - Closing braces on new line
  - Use line breaks after pipeline operators
  - PascalCase for function and parameter names
  - Avoid unnecessary whitespace
  - Use named parameters when calling functions or cmdlets
    - Example: `Get-ChildItem -Path 'C:\' -Recurse`
    - Example: `New-Resource -Name 'MyResource' -Environment 'Production'`
  - Avoid using positional parameters when calling functions or cmdlets
    - Example: `Get-ChildItem 'C:\'` is acceptable, but `Get-ChildItem -Path 'C:\'` is preferred for clarity
    - Exceptions:
      - The `-Message` parameter in `Write-Error`, `Write-Warning`, and `Write-Verbose` can be positional as it is the first parameter
      - The `-InputObject` parameter in `Select-Object` can be positional as it is the first parameter
  - Use single quotes for strings (including parameter values) unless interpolation is needed (e.g., `Write-Output 'Hello, World!'`)
  - Align parameter attributes vertically for readability
  - Align key/value pairs in hashtables for readability
  - Lines should not exceed 115 characters
  - Use `#region` and `#endregion` for logical grouping of code blocks with descriptive titles
  - Use `#` for inline comments, but avoid excessive comments; code should be self-explanatory
  - Capitalize the first letter of comments
  - Avoid abbreviated or shortened words unless syntax requires it
    - Use `Configuration` instead of `Config`                   <!-- spell-checker:disable-line -->
    - Use `Information` instead of `Info`                       <!-- spell-checker:disable-line -->
    - Use `Authentication` or `Authorization` instead of `Auth` <!-- spell-checker:disable-line -->
    - Use `Initialization` instead of `Init`
    - Use `Credentials` instead of `Creds`                      <!-- spell-checker:disable-line -->
    - Use `Parameters` instead of `Params`                      <!-- spell-checker:disable-line -->
    - Use `Parameter` instead of `Param`                        <!-- spell-checker:disable-line -->
  - Never use backticks (`) for line continuation; use parentheses or splatting instead
  - Prefer `foreach` over `ForEach-Object` for better performance and readability
  - Add `else` blocks for clarity in conditional statements
  - Use `switch` statements for multiple conditions instead of multiple `if` statements
  - Avoid deeply nested conditional statements
  - Explicitly define the value of attributes in `CmdletBinding` (e.g., `SupportsShouldProcess = $true`)
  - Explicitly define the value of attributes in `Parameter` (e.g., `Mandatory = $true`)
  - Hash tables should be defined with a new line after the opening brace and before the closing brace
    - Example:
      ```powershell
      @{
          Key1 = 'Value1'
          Key2 = 'Value2'
      }
      ```
    - Avoid:
      ```powershell
      @{Key1 = 'Value1'; Key2 = 'Value2'}
      ```
    - Acceptable for single-line hash tables with a single key-value pair:
      ```powershell
      @{ Key1 = 'Value1' }
      ```
  - Parameter variables should be defined with a new line after the type declaration and before the parameter name
    - Example:
      ```powershell
      [Parameter(Mandatory = $true)]
      [string]
      $Name
      ```
    - Avoid:
      ```powershell
      [Parameter(Mandatory = $true)][string]$Name
      ```
    - Avoid:
      ```powershell
      [Parameter(Mandatory = $true)]
      [string]$Name
      ```
  - Parameter declarations should be separated by a new line for readability
    - Example:
      ```powershell
      [Parameter(Mandatory = $true)]
      [string]
      $Name,

      [Parameter(Mandatory = $false)]
      [ValidateSet('Dev', 'Test', 'Prod')]
      [string]
      $Environment = 'Dev'
      ```
    - Avoid:
      ```powershell
      [Parameter(Mandatory = $true)]
      [string]
      $Name,
      [Parameter(Mandatory = $false)]
      [ValidateSet('Dev', 'Test', 'Prod')]
      [string]
      $Environment = 'Dev'
      ```

- **Pipeline Support:**
  - Implement `begin`/`process`/`end` blocks for pipeline functions
  - Use `ValueFromPipeline` where appropriate
  - Support pipeline input by property name
  - Return proper objects, not formatted text
  - Support arrays for parameter values
    - Use `foreach` in the `process` block to handle each item

- **Avoid Aliases:** Use full cmdlet names and parameters
  - Avoid using aliases in scripts (e.g., use `Get-ChildItem` instead of `gci`); aliases are acceptable for interactive shell use.
  - Use `Where-Object` instead of `?` or `where`
  - Use `ForEach-Object` instead of `%`
  - Use `Get-ChildItem` instead of `ls` or `dir`

## Full Example: End-to-End Cmdlet Pattern

```powershell
function New-Resource {
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = 'Medium')]
    param(
        [Parameter(
          Mandatory = $true,
          ValueFromPipeline = $true,
          ValueFromPipelineByPropertyName = $true
        )]
        [ValidateNotNullOrEmpty()]
        [string]
        $Name,

        [Parameter(Mandatory = $false)]
        [ValidateSet('Development', 'Production')]
        [string]
        $Environment = 'Development'
    )

    begin {
        Write-Verbose "Starting resource creation process for '$Name' in '$Environment' environment"
    }

    process {
        try {
            if ($PSCmdlet.ShouldProcess($Name, 'Create new resource')) {
                # Resource creation logic here
                Write-Output ([PSCustomObject]@{
                    Name        = $Name
                    Environment = $Environment
                    Created     = Get-Date
                })
            }
        }
        catch {
            Write-Error "Failed to create resource: $_"
        }
    }

    end {
        Write-Verbose "Completed resource creation process for '$Name' in '$Environment' environment"
    }
}
```

## Testing

- **Unit Tests:**
  - Use Pester for unit testing
  - Test cmdlet functionality and edge cases
  - Mock external dependencies
  - Validate output objects and properties
  - Use `It`, `Should`, and `Describe` blocks for clarity
  - Never use `param` blocks in mock script blocks <!-- spell-checker:disable-line -->
  - Run the Test task in VS Code to execute tests if it is available
